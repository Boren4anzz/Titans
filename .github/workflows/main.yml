name: Run Docker Script Directly

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  run-docker-script:
    runs-on: ubuntu-22.04

    steps:
    # Langkah pertama: menjalankan skrip Docker.sh langsung di dalam workflow
    - name: Run Docker Setup Script
      run: |
        #!/bin/bash

        # Warna untuk output
        GREEN='\033[0;32m'
        YELLOW='\033[1;33m'
        NC='\033[0m' # No Color

        # Verifikasi akses root
        if [ "$(id -u)" != "0" ]; then
            echo -e "${YELLOW}This script requires root access.${NC}"
            echo -e "${YELLOW}Please enter root mode using 'sudo -i', then rerun this script.${NC}"
            exit 1
        fi

        # Identity Code yang diberikan langsung
        id="58CED15B-7DB4-46AE-BE98-79428E87AA38"

        # Konfigurasi awal
        storage_gb=50        # Kapasitas penyimpanan (GB) per container
        start_port=1235      # Port awal untuk container pertama
        container_count=15   # Jumlah container per IP

        # Mendapatkan daftar IP publik
        public_ips=$(hostname -I)

        if [ -z "$public_ips" ]; then
            echo -e "${YELLOW}No public IP detected.${NC}"
            exit 1
        fi

        # Memeriksa dan menginstal Docker jika belum terpasang
        if ! command -v docker &> /dev/null
        then
            echo -e "${GREEN}Docker not detected, installing...${NC}"
            apt-get update
            apt-get install ca-certificates curl gnupg lsb-release -y
            apt-get install docker.io -y
        else
            echo -e "${GREEN}Docker is already installed.${NC}"
        fi

        # Menarik image Docker
        echo -e "${GREEN}Pulling the Docker image nezha123/titan-edge...${NC}"
        docker pull nezha123/titan-edge

        # Memulai proses pembuatan container
        current_port=$start_port

        for ip in $public_ips; do
            echo -e "${GREEN}Setting up nodes for IP $ip${NC}"

            for ((i=1; i<=container_count; i++))
            do
                # Nama container dan folder penyimpanan
                container_name="titan_${ip}_${i}"
                storage_path="/root/titan_storage_${ip}_${i}"

                # Membuat folder penyimpanan jika belum ada
                mkdir -p "$storage_path"

                # Memeriksa apakah container sudah ada
                if [ $(docker ps -a --filter "name=^/${container_name}$" --format '{{.Names}}') ]; then
                    echo -e "${YELLOW}Container $container_name already exists. Skipping...${NC}"
                    continue
                fi

                # Menjalankan container baru
                container_id=$(docker run -d --restart always -v "$storage_path:/root/.titanedge/storage" --name "$container_name" --net=host nezha123/titan-edge)

                echo -e "${GREEN}Node $container_name is running with container ID $container_id${NC}"

                # Mengatur konfigurasi container
                sleep 30
                docker exec $container_id bash -c "\
                    sed -i 's/^[[:space:]]*#StorageGB = .*/StorageGB = $storage_gb/' /root/.titanedge/config.toml && \
                    sed -i 's/^[[:space:]]*#ListenAddress = \"0.0.0.0:1234\"/ListenAddress = \"0.0.0.0:$current_port\"/' /root/.titanedge/config.toml && \
                    echo 'Storage for node $container_name set to $storage_gb GB, Port set to $current_port'"

                # Restart container untuk menerapkan konfigurasi
                docker restart $container_id

                # Binding node ke server
                docker exec $container_id bash -c "\
                    titan-edge bind --hash=$id https://api-test1.container1.titannet.io/api/v2/device/binding"
                echo -e "${GREEN}Node $container_name has been bound.${NC}"

                # Memperbarui port untuk container berikutnya
                current_port=$((current_port + 1))
            done
        done

        echo -e "${GREEN}============================== All 15 nodes per IP have been set up and are running ===============================${NC}"
