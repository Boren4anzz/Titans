name: Run Docker Script Directly

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  run-docker-script:
    runs-on: ubuntu-22.04

    steps:
    # Step 1: Set up the script to run as root with sudo
    - name: Run Docker Setup Script
      run: |
        #!/bin/bash

        # Colors for output
        GREEN='\033[0;32m'
        YELLOW='\033[1;33m'
        NC='\033[0m' # No Color

        # Verifying root access using sudo
        if [ "$(id -u)" != "0" ]; then
            echo -e "${YELLOW}This script requires root access.${NC}"
            echo -e "${YELLOW}Using sudo to run the script.${NC}"
        fi

        # Identity Code directly provided
        id="58CED15B-7DB4-46AE-BE98-79428E87AA38"

        # Configuration variables
        storage_gb=50        # Storage capacity (GB) per container
        start_port=1235      # Starting port for the first container
        container_count=5    # Limit number of containers to 5 per IP

        # Get the public IP address
        public_ips=$(hostname -I)

        if [ -z "$public_ips" ]; then
            echo -e "${YELLOW}No public IP detected.${NC}"
            exit 1
        fi

        # Check if Docker is installed, install it if not
        if ! command -v docker &> /dev/null
        then
            echo -e "${GREEN}Docker not detected, installing...${NC}"
            sudo apt-get update
            sudo apt-get install ca-certificates curl gnupg lsb-release -y
            sudo apt-get install docker.io -y
        else
            echo -e "${GREEN}Docker is already installed.${NC}"
        fi

        # Pull Docker image
        echo -e "${GREEN}Pulling the Docker image nezha123/titan-edge...${NC}"
        sudo docker pull nezha123/titan-edge

        # Start creating containers
        current_port=$start_port
        container_counter=0  # Counter to track number of containers created

        for ip in $public_ips; do
            echo -e "${GREEN}Setting up nodes for IP $ip${NC}"

            for ((i=1; i<=container_count; i++))
            do
                if [ $container_counter -ge 5 ]; then
                    echo -e "${GREEN}5 containers have been created, stopping script.${NC}"
                    exit 0  # Stop the script after 5 containers are created
                fi

                # Container name and storage folder
                container_name="titan_${ip}_${i}"
                storage_path="/root/titan_storage_${ip}_${i}"

                # Create storage folder if it doesn't exist
                sudo mkdir -p "$storage_path"

                # Check if the container already exists
                if [ $(sudo docker ps -a --filter "name=^/${container_name}$" --format '{{.Names}}') ]; then
                    echo -e "${YELLOW}Container $container_name already exists. Skipping...${NC}"
                    continue
                fi

                # Run a new container
                container_id=$(sudo docker run -d --restart always -v "$storage_path:/root/.titanedge/storage" --name "$container_name" --net=host nezha123/titan-edge)

                echo -e "${GREEN}Node $container_name is running with container ID $container_id${NC}"

                # Configure container
                sleep 30
                sudo docker exec $container_id bash -c "\
                    sed -i 's/^[[:space:]]*#StorageGB = .*/StorageGB = $storage_gb/' /root/.titanedge/config.toml && \
                    sed -i 's/^[[:space:]]*#ListenAddress = \"0.0.0.0:1234\"/ListenAddress = \"0.0.0.0:$current_port\"/' /root/.titanedge/config.toml && \
                    echo 'Storage for node $container_name set to $storage_gb GB, Port set to $current_port'"

                # Restart container to apply configuration
                sudo docker restart $container_id

                # Bind node to the server
                sudo docker exec $container_id bash -c "\
                    titan-edge bind --hash=$id https://api-test1.container1.titannet.io/api/v2/device/binding"
                echo -e "${GREEN}Node $container_name has been bound.${NC}"

                # Update port for the next container
                current_port=$((current_port + 1))

                # Increment container counter
                container_counter=$((container_counter + 1))
            done
        done

        echo -e "${GREEN}============================== 5 containers have been created and the script is complete ===============================${NC}"
